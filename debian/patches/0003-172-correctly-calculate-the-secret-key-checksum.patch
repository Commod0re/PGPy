From: Michael Greene <a.minor.threat@gmail.com>
Date: Tue, 25 Apr 2017 17:52:23 -0700
Subject: #172 - correctly calculate the secret key checksum [skip ci]

(cherry picked from commit 8bceaa0a9ff5c6668f43b72781791a03e49bb32d)
---
 pgpy/packet/fields.py | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

diff --git a/pgpy/packet/fields.py b/pgpy/packet/fields.py
index b5b5f2e..463f426 100644
--- a/pgpy/packet/fields.py
+++ b/pgpy/packet/fields.py
@@ -1012,8 +1012,7 @@ class PrivKey(PubKey):
         """Generate a new PrivKey"""
 
     def _compute_chksum(self):
-        chs = sum(sum(bytearray(c.to_mpibytes())) for c in self) % 65536
-        self.chksum = bytearray(self.int_to_bytes(chs, 2))
+        "Calculate the key checksum"
 
     def publen(self):
         return super(PrivKey, self).__len__()
@@ -1113,6 +1112,10 @@ class RSAPriv(PrivKey, RSAPub):
                                      rsa.rsa_crt_iqmp(self.p, self.q),
                                      rsa.RSAPublicNumbers(self.e, self.n)).private_key(default_backend())
 
+    def _compute_chksum(self):
+        chs = sum(sum(bytearray(c.to_mpibytes())) for c in (self.d, self.p, self.q, self.u)) % 65536
+        self.chksum = bytearray(self.int_to_bytes(chs, 2))
+
     def _generate(self, key_size):
         if any(c != 0 for c in self):  # pragma: no cover
             raise PGPError("key is already populated")
@@ -1183,6 +1186,10 @@ class DSAPriv(PrivKey, DSAPub):
         pn = dsa.DSAPublicNumbers(self.y, params)
         return dsa.DSAPrivateNumbers(self.x, pn).private_key(default_backend())
 
+    def _compute_chksum(self):
+        chs = sum(bytearray(self.x.to_mpibytes())) % 65536
+        self.chksum = bytearray(self.int_to_bytes(chs, 2))
+
     def _generate(self, key_size):
         if any(c != 0 for c in self):  # pragma: no cover
             raise PGPError("key is already populated")
@@ -1238,6 +1245,10 @@ class ElGPriv(PrivKey, ElGPub):
     def __privkey__(self):
         raise NotImplementedError()
 
+    def _compute_chksum(self):
+        chs = sum(bytearray(self.x.to_mpibytes())) % 65536
+        self.chksum = bytearray(self.int_to_bytes(chs, 2))
+
     def _generate(self, key_size):
         raise NotImplementedError(PubKeyAlgorithm.ElGamal)
 
@@ -1273,6 +1284,10 @@ class ECDSAPriv(PrivKey, ECDSAPub):
         ecp = ec.EllipticCurvePublicNumbers(self.x, self.y, self.oid.curve())
         return ec.EllipticCurvePrivateNumbers(self.s, ecp).private_key(default_backend())
 
+    def _compute_chksum(self):
+        chs = sum(bytearray(self.s.to_mpibytes())) % 65536
+        self.chksum = bytearray(self.int_to_bytes(chs, 2))
+
     def _generate(self, oid):
         if any(c != 0 for c in self):  # pragma: no cover
             raise PGPError("Key is already populated!")
